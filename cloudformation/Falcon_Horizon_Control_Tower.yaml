AWSTemplateFormatVersion: '2010-09-09'
#
# Version 1
# Creates a Stackset in AWS Control Tower to Enable CrowdStrike Horizon
#
Description: Creates a Stackset in AWS Control Tower to Enable CrowdStrike Horizon
Parameters:
  FalconClientId:
    Description: Your Falcon OAuth2 Client ID.
    NoEcho: 'true'
    Type: String
  FalconSecret:
    Description: Your Falcon OAuth2 API Secret.
    NoEcho: 'true'
    Type: String
  CSCloud:
    Type: String
    Default: us1
    AllowedValues: ["us1", "us2", "eu1", "gov"]
    Description: CrowdStrike Cloud
  EnableIOA:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'
  S3Bucket:
    Type: String
  UseExistingCloudtrail:
    Description: When set to false, a CloudTrail resource is created which allows
      Horizon to consume non-mutating API events
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'true'

  PushMasterAccountStackset:
    Description: Select if you wish to automatically apply the master account EventBridge Rules
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'



Mappings:
  CrowdStrikeCSPMRoleTemplateURL:
    us1:
      CSAccountNumber: "292230061137"
      StackName: "CrowdStrike-CSPM-Integration"
      StackNameEb: "CrowdStrike-CSPM-Integration-EB"
      StackNameRootEb: "CrowdStrike-CSPM-Integration-Root-EB"
      CSRoleName: "CrowdStrikeCSPMConnector"
      cf: "https://cs-prod-cloudconnect-templates.s3.amazonaws.com/aws_cspm_cloudformation_v2.json"
      cfiam: "https://cs-prod-cloudconnect-templates.s3.amazonaws.com/aws_cspm_cloudformation_iam_v2.json"
      cfeb: "https://cs-prod-cloudconnect-templates.s3.amazonaws.com/aws_cspm_cloudformation_eb_v2.json"
    us2:
      CSAccountNumber: "292230061137"
      StackName: "CrowdStrike-CSPM-Integration"
      StackNameEb: "CrowdStrike-CSPM-Integration-EB"
      StackNameRootEb: "CrowdStrike-CSPM-Integration-Root-EB"
      CSRoleName: "CrowdStrikeCSPMConnector"
      cf: "https://cs-prod-cloudconnect-templates.s3.amazonaws.com/aws_cspm_cloudformation_v2.json"
      cfiam: "https://cs-prod-cloudconnect-templates.s3.amazonaws.com/aws_cspm_cloudformation_iam_v2.json"
      cfeb: "https://cs-prod-cloudconnect-templates.s3.amazonaws.com/aws_cspm_cloudformation_eb_v2.json"
    eu:
      CSAccountNumber: "292230061137"
      StackName: "CrowdStrike-CSPM-Integration"
      StackNameEb: "CrowdStrike-CSPM-Integration-EB"
      StackNameRootEb: "CrowdStrike-CSPM-Integration-Root-EB"
      CSRoleName: "CrowdStrikeCSPMConnector"
      cf: "https://cs-prod-cloudconnect-templates.s3.amazonaws.com/aws_cspm_cloudformation_v2.json"
      cfiam: "https://cs-prod-cloudconnect-templates.s3.amazonaws.com/aws_cspm_cloudformation_iam_v2.json"
      cfeb: "https://cs-prod-cloudconnect-templates.s3.amazonaws.com/aws_cspm_cloudformation_eb_v2.json"

  S3perRegion:
    us-east-1:
      NAME: crowdstrike-sa-resources-ct-us-east-1
    us-east-2:
      NAME: crowdstrike-sa-resources-ct-us-east-2
    us-west-2:
      NAME: crowdstrike-sa-resources-ct-us-west-2
    eu-west-1:
      NAME: crowdstrike-sa-resources-ct-eu-west-1
    ap-southeast-2:
      NAME: crowdstrike-sa-resources-ct-ap-southeast-2

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: CrowdStrike Falcon API keys. (From CrowdStrike Console)
        Parameters:
          - FalconClientId
          - FalconSecret
Conditions:
  ShouldCreateIOAResources: !Equals [ !Ref 'EnableIOA', true ]


Resources:
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref AWS::AccountId
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess
  AdministrationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AssumeRole-AWSCloudFormationStackSetExecutionRole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource:
                  - "arn:*:iam::*:role/AWSCloudFormationStackSetExecutionRole"
#
# Cloudformation Stack to create if IOA Enabled.
#
  IAMStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ExternalID: !GetAtt TriggerRegisterAccountLambda.external_id
        CSRoleName: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, CSRoleName ]
        RoleName: !GetAtt TriggerRegisterAccountLambda.iam_role_name
        CSAccountNumber: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, CSAccountNumber ]
        EnableIOA: !Ref EnableIOA
      TemplateURL: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, cfiam ]
      TimeoutInMinutes: 10
  IAMStackSet:
    DependsOn: AdministrationRole
    Type: 'AWS::CloudFormation::StackSet'
    Properties:
      OperationPreferences:
        FailureTolerancePercentage: 100
        MaxConcurrentCount: 20
        RegionConcurrencyType: PARALLEL
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: "Configures CSPM resources in child accounts"
      Parameters:
        - ParameterKey: ExternalID
          ParameterValue: !GetAtt TriggerRegisterAccountLambda.external_id
        - ParameterKey: CSRoleName
          ParameterValue: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, CSRoleName ]
        - ParameterKey: RoleName
          ParameterValue: !GetAtt TriggerRegisterAccountLambda.iam_role_name
        - ParameterKey: CSAccountNumber
          ParameterValue: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, CSAccountNumber ]
        - ParameterKey: EnableIOA
          ParameterValue: !Ref EnableIOA
      PermissionModel: SELF_MANAGED
      AdministrationRoleARN: !Join [ ':', [ 'arn:aws:iam:', !Ref 'AWS::AccountId', 'role/service-role/AWSControlTowerStackSetRole' ] ]
      ExecutionRoleName: AWSControlTowerExecution
      StackSetName: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, StackName ]
      TemplateURL: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, cfiam ]
#
# Master Account StackSet with IOA enabled - Creates Eventbridge rules in each region
#
  IOAStackSetRootAcct:
    Condition: ShouldCreateIOAResources
    Type: 'AWS::CloudFormation::StackSet'
    Properties:
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: "Create EventBridge rule in the root account in every region to send CloudTrail events to CrowdStrike"
      Parameters:
        - ParameterKey: CSAccountNumber
          ParameterValue: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, CSAccountNumber ]
        - ParameterKey: CSEventBusName
          ParameterValue: !GetAtt TriggerRegisterAccountLambda.external_id
      PermissionModel: SELF_MANAGED
      AdministrationRoleARN: !Join [ ':', [ 'arn:aws:iam:', !Ref 'AWS::AccountId', 'role/AWSCloudFormationStackSetAdministrationRole' ] ]
      ExecutionRoleName: AWSCloudFormationStackSetExecutionRole
      StackSetName: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, StackNameRootEb ]
      TemplateURL: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, cfeb ]
#
# Org StackSet with IOA enabled - Creates Eventbridge rules in each region in each child account
#
  IOAStackSetMemberAcct:
    Condition: ShouldCreateIOAResources
    Type: 'AWS::CloudFormation::StackSet'
    Properties:
      Capabilities:
        - CAPABILITY_IAM
        - CAPABILITY_NAMED_IAM
        - CAPABILITY_AUTO_EXPAND
      Description: "Create EventBridge rule in every region in each child account to send CloudTrail events to CrowdStrike"
      Parameters:
        - ParameterKey: CSAccountNumber
          ParameterValue: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, CSAccountNumber ]
        - ParameterKey: CSEventBusName
          ParameterValue: !GetAtt TriggerRegisterAccountLambda.external_id
      PermissionModel: SELF_MANAGED
      AdministrationRoleARN: !Join [ ':', [ 'arn:aws:iam:', !Ref 'AWS::AccountId', 'role/service-role/AWSControlTowerStackSetRole' ] ]
      ExecutionRoleName: AWSControlTowerExecution
      StackSetName: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, StackNameEb ]
      TemplateURL: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, cfeb ]


#
# Lambda function to provision/de provision the account with CRWD using a CFT.
#
  RegisterAccount:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
#        S3Bucket: !FindInMap [ S3perRegion, !Ref AWS::Region, NAME ]
        S3Key: register_org.zip
      Layers: [ !Ref FalconpyLayer ]
      Handler: register_org.lambda_handler
      MemorySize: 128
      Role: !GetAtt "CrowdStrikeCSPMRegisterAcctLambdaRole.Arn"
      Runtime: python3.7
      Timeout: 300
      FunctionName: CSPMAccount-Registration
##
## Trigger the lambda function to provision/deprovision the account with CRWD using a CFT.
##
  TriggerRegisterAccountLambda:
    Type: 'Custom::TriggerLambda'
    DependsOn:
      - CrowdStrikeCSPMRegisterAcctLambdaRole
    Properties:
      aws_region: !Ref AWS::Region
      FalconSecret: !Ref FalconSecret
      FalconClientId: !Ref FalconClientId
      CSCloud: !Ref CSCloud
      ServiceToken: !GetAtt
        - RegisterAccount
        - Arn
# The lambda role requires Admin rights to create resources required for CPSM
# CSPM creates IAM roles, cloudtrail and eventbridge infra
# Lab users have reader permissions so they cannot modify this lambda or attach the role to another resource
  CrowdStrikeCSPMRegisterAcctLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CSPMRegistrationRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      Policies:
        - PolicyName: List_secrets
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - secretsmanager:ListSecrets
                - events:*
                - cloudtrail:DescribeTrails
              Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AdministratorAccess

  CrowdStrikeCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: CrowdStrike Credentials
      Name: !Join
              - '-'
              - - CrowdStrikeHorizonAPISecret
                - !Ref 'AWS::StackName'
      SecretString:
        Fn::Join:
          - ''
          - - '{"FalconClientId":"'
            - Ref: FalconClientId
            - '","FalconSecret": "'
            - Ref: FalconSecret
            - '"}'
  LambdaToCreateStackSetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - CrowdStrikeLambdaCreateStackSetRole
          - !Ref 'AWS::StackName'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      Policies:
        - PolicyName: Create-Trail
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:CreateServiceLinkedRole
                Resource: arn:aws:iam::106808901653:role/*
              - Sid: VisualEditor1
                Effect: Allow
                Action:
                  - organizations:DescribeOrganization
                  - organizations:ListAWSServiceAccessForOrganization
                Resource: '*'
        - PolicyName: Create-Delete-Trail
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - s3:PutObject
                  - cloudtrail:StopLogging
                  - cloudtrail:StartLogging
                  - cloudtrail:DeleteTrail
                  - cloudtrail:CreateTrail
                Resource:
                  - "arn:aws:cloudtrail:eu-west-1:106808901653:trail/cs-horizon-org-trail"
                  - Fn::Join: [ '', [ "arn:aws:s3:::", Fn::GetAtt TriggerRegisterAccountLambda.aws_cloudtrail_bucket_name, "/*" ]]
        - PolicyName: Get_Regions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action: ec2:DescribeRegions
                Resource: '*'
        - PolicyName: CloudFormation_ops
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor2
              Effect: Allow
              Action:
                - cloudformation:CreateStackSet
                - cloudformation:CreateStackInstances
                - cloudformation:DescribeStackSet
                - cloudformation:ListStackInstances
                - cloudformation:DeleteStackInstances
                - cloudformation:DeleteStackSet
              Resource: !Join [ ':', [ 'arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/*:*' ] ]
        - PolicyName: Pass_Role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Sid: VisualEditor3
              Effect: Allow
              Action:
                - iam:PassRole
              Resource: !Join [ ':', [ 'arn:aws:iam:', !Ref "AWS::AccountId", 'role/service-role/AWSControlTowerStackSetRole' ] ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSOrganizationsReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  FalconpyLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref S3Bucket
#        S3Bucket: !FindInMap [ S3perRegion, !Ref "AWS::Region", NAME ]
        S3Key: falconpy-layer.zip
      Description: Layer for requests package
      LayerName: falconpy-package
  CrowdStrikeHorizonCaptureControlTowerLifeCycleEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events and Trigger an Action
      EventPattern:
        detail:
          eventName:
            - CreateManagedAccount
            - UpdateManagedAccount
          eventSource:
            - controltower.amazonaws.com
        detail-type:
          - AWS Service Event via CloudTrail
        source:
          - aws.controltower
      Name: CrowdStrikeHorizonCaptureControlTowerLifeCycleEvents
      State: ENABLED
      Targets:
        - Arn: !GetAtt "PushHorizonStackInstances.Arn"
          Id: PushHorizonStackInstances
  LambdaRoleToCaptureEvents:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - LambdaRoleToCaptureEvents
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: { }
      Path: /
      Policies:
        - PolicyName: create_stackinstances
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Action:
                - 'cloudformation:CreateStackInstances'
              Resource: !Join [ ':',[ 'arn:aws:cloudformation', !Ref 'AWS::Region', !Ref 'AWS::AccountId', 'stackset/*:*' ] ]
        - PolicyName: Get_Regions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action: ec2:DescribeRegions
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  PushHorizonStackInstances:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
#        S3Bucket: !FindInMap [ S3perRegion, !Ref "AWS::Region", NAME ]
        S3Key: push_horizon_stackset_lambda.zip
      Layers: [ !Ref FalconpyLayer ]
      Environment:
        Variables:
          EnableIOA: !Ref EnableIOA
          IOAStackSet: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, StackNameEb ]
          IAMStackSet: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, StackName ]
      Handler: push_horizon_stackset_lambda.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaRoleToCaptureEvents.Arn"
      Runtime: python3.7
      Timeout: 60
  PermissionForEventsToInvokeLambdachk:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "PushHorizonStackInstances.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "CrowdStrikeHorizonCaptureControlTowerLifeCycleEvents.Arn"

#
# Lambda function to provision/de provision the account with CRWD using a CFT.
#
  IOASetupRootAcct:
    Condition: ShouldCreateIOAResources
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
#        S3Bucket: !FindInMap [ S3perRegion, !Ref AWS::Region, NAME ]
        S3Key: ioa_setup_master.zip
      Layers: [ !Ref FalconpyLayer ]
      Environment:
        Variables:
          PushMasterAccountStackset: !Ref PushMasterAccountStackset
          BucketName: !GetAtt TriggerRegisterAccountLambda.aws_cloudtrail_bucket_name
          AWSRegion: !Ref AWS::Region
          UseExistingCloudtrail: !Ref UseExistingCloudtrail
          EnableIOA: !Ref EnableIOA
          StackNameRootEb: !FindInMap [ CrowdStrikeCSPMRoleTemplateURL, !Ref CSCloud, StackNameRootEb ]
      Handler: ioa_setup_master.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaToCreateStackSetRole.Arn"
      Runtime: python3.7
      Timeout: 300
      FunctionName: RootAccountEventBridgeSetup
##
## Trigger the lambda function to provision/deprovision the account with CRWD using a CFT.
##
#  TriggerIOASetupRootAcctLambda:

#    Type: 'Custom::TriggerLambda'
#    DependsOn:
#      - LambdaToCreateStackSetRole
#    Properties:
#      CTBucketName: !GetAtt TriggerRegisterAccountLambda.aws_cloudtrail_bucket_name
#      ServiceToken: !GetAtt
#        - IOASetupRootAcct
#        - Arn

